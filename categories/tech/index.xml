<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on mLAB</title>
    <link>https://mukai-lab.info/categories/tech/</link>
    <description>Recent content in Tech on mLAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 25 Feb 2016 06:18:31 +0000</lastBuildDate>
    
	<atom:link href="https://mukai-lab.info/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 8における「Access Restriction」の回避</title>
      <link>https://mukai-lab.info/pages/tech/java/2016-02-25-javafx/</link>
      <pubDate>Thu, 25 Feb 2016 06:18:31 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/java/2016-02-25-javafx/</guid>
      <description>Eclipse環境でJavaFX（javafxパッケージ）をインポートしようとすると， 「Access Restriction」エラーとなってしまいコンパイルできません． JavaFXはJava 8では標準のGUIライブラリとして統合されたはずなのに， なんでだー となったので回避方法を調べてみました．
Eclipseのツールバーから[ウィンドウ]-[設定]-[Java]-[コンパイラー]-[エラー/警告]を選択します． ここで下記のように「使用すべきではない制限されたAPI」の「禁止された参照」を 無視 に設定します． これで問題なくインポートできるはずです．</description>
    </item>
    
    <item>
      <title>Jekyllでオープン・グラフ・プロトコル（OGP）の設定</title>
      <link>https://mukai-lab.info/pages/tech/jekyll/2016-02-23-ogp/</link>
      <pubDate>Tue, 23 Feb 2016 00:27:33 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/jekyll/2016-02-23-ogp/</guid>
      <description>フェイスブックでシェアされたときに表示される画像は，オープン・グラフ・プロトコル（OGP）で制御されています． OGPの設定がなければ，自動で適当な画像が選択されますが，意図しない画像が選択されることも多いです． そこで，Jekyllで採用されている「YAML Front Matter」を利用してOGPを設定する方法をメモしておきます．
まずは，ブログ記事などのファイルの先頭に， 下記のようにimageという変数を用意して，参照する画像を設定しておきます．
--- layout: default image: &amp;#34;https://i.gyazo.com/cdf2b2e7be4e80421f55152a4b348a7a.png&amp;#34; --- これで page.image という記述で設定された値を取得することができるようになります． 次に，&amp;quot;_includes/head.html&amp;quot;に下記のように page.image を利用してOGPの設定をします． このとき，条件文を利用することで page.image が設定されている場合に限ってOGPの設定を有効にしています． OGPは&amp;lt;meta property=&amp;quot;og:image&amp;quot; content=&amp;quot;参照画像&amp;quot;&amp;gt;と記述します．
 これで，フェイスブックでシェアされたときの画像が設定されます． もし画像が反映されない場合は，フェイスブックのキャッシュが原因かもしれません． この場合は，Open Graph Object Debuggerでキャッシュを削除してみましょう．</description>
    </item>
    
    <item>
      <title>Git Bashのホームディレクトリの変更</title>
      <link>https://mukai-lab.info/pages/tech/github/2016-02-17-git-bash/</link>
      <pubDate>Wed, 17 Feb 2016 02:34:43 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/github/2016-02-17-git-bash/</guid>
      <description>WindowsでGit環境を構築するとお世話になるであろう Git Bash のホームディレクトリの変更に関してメモします． GitHubのレポジトリはZ:\GitHubに設置しているため，このZ:\GitHubをホームディレクトリに設定することを目指します．
まずは，WindowsとはいえBash であることに変わりはないので，C:\Users\Naoto.bashrcを作成して，環境変数$HOMEの設定を変更してみます．
HOME=/z/GitHub/ これで問題解決と思いきや，Git Bash を実行してみると下記のように，起動時のディレクトリは/c/Users/Naotoのままです． ちなみに，環境変数$HOME自体は設定されていて，cdコマンドを実行すると/z/GitHub/に移動します．

そこで，アプローチを変更して， Git Bash のショートカットアイコンのプロパティを変更してみます． プロパティには 作業フォルダ という項目があり，ここにZ:\GitHub設定します． また，リンク先には &amp;ndash;cd-to-home という引数が設定されているので削除しておきます．

これでGit Bashのショートカットアイコンから起動してみると， 下記のように無事にホームディレクトリを変更することができました．</description>
    </item>
    
    <item>
      <title>Liquidを利用したファイルの埋め込み</title>
      <link>https://mukai-lab.info/2016/02/10/include/</link>
      <pubDate>Wed, 10 Feb 2016 08:45:44 +0000</pubDate>
      
      <guid>https://mukai-lab.info/2016/02/10/include/</guid>
      <description>JekyllではテンプレートエンジンとしてLiquidを採用しています． このLiquidでは タグ や フィルタ という機能を利用して， ウェブページ制作における無駄を減らすすことが可能です．
ここでは，複数のページに共通で利用されるコードの断片を他のファイルから読み込んで埋め込む方法を紹介します． 埋め込むコードを common.html として作成し， _includes ディレクトリに配置します． 後はMDファイルやHTMLファイルに下記のように記述するだけです．
 その他，Gistで公開しているソースコードも下記の方法で公開可能です．
 ただし，jekyll-gistを事前にインストールし， さらに，_config.yml に下記の設定を加えておく必要があるようです． この _config.yml の設定は忘れがちになるので特に注意が必要です．
 </description>
    </item>
    
    <item>
      <title>Github Pagesでの独自ドメインの設定</title>
      <link>https://mukai-lab.info/pages/tech/github/2016-02-08-domain/</link>
      <pubDate>Mon, 08 Feb 2016 09:13:03 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/github/2016-02-08-domain/</guid>
      <description>ブログを立ち上げたので独自ドメインを取得してみることにしました． ドメインはお名前.comで，トップレベルドメインには「.info」を選択しました． １年間の契約でなんと「269円（手数料込）」！ メジャーなトップレベルドメインではないとはいえ，この安さに驚きました（普段，ドメイン取得することないからなぁ）．
さて，ホスティングしているGithub Pagesを独自ドメインで公開する方法ですが， 様々なサイトで詳しく情報が公開されており，検索すれば容易に発見できると思います． 他と重複する情報とはなりますが，念のためメモしておきたいと思います．
まずは，お名前.comの設定ですが， ドメインNaviでGithub PagesのDNSレコードの登録が必要です． 具体的には，下記のようにAレコードとして，192.30.252.153と192.30.252.154を登録するだけです． （参考：Github Help）

次に，自身のレポジトリの設定ですが， CNAME という名前をファイルを作成し， 転送先の独自ドメイン（ここでは muka-lab.info ）を入力します． 後は，このファイルを他のHTMLファイルなどと一緒にデプロイするだけです． これらの変更の適用には時間がかかるようなので， 少し時間を空けてから転送が成功するか確認しましょう．</description>
    </item>
    
    <item>
      <title>Jekyllにおけるシンタックスハイライト</title>
      <link>https://mukai-lab.info/pages/tech/jekyll/2016-02-05-highlight/</link>
      <pubDate>Fri, 05 Feb 2016 02:58:35 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/jekyll/2016-02-05-highlight/</guid>
      <description>Jekyllが得意とするシンタックスハイライトですが，設定でつまずいたのでメモしておきます． シンタックスハイライトにはrougeやpygmentsが利用されるようですが，ここではrougeを適用してみたいと思います． まずは，下記のコマンドでrougeをインストールします．
gem install rouge 次に，&amp;quot;_config.yml&amp;quot;でシンタックスハイライトにrougeを指定しておきます．
highlighter: rouge ここまでは，何てことないのですが，ここからつまずきました． シンタックスハイライトのスタイルは&amp;rdquo;_syntax-highlighting.scss&amp;quot;で設定されているようです． 色などを変更したい場合は，このファイルを修正すれば良いはずですが，何故か変更が適用されません．
マークダウンでハイライトするときは，ソースコードを``で囲みます． 変換後のhtmlを確認すると，該当箇所は下記のように，クラス属性にhighlighter-rougeが設定されています．
&amp;lt;code class=&amp;#34;highlighter-rouge&amp;#34;&amp;gt;&amp;lt;/code&amp;gt; 再度，&amp;quot;_syntax-highlighting.scss&amp;quot;を確認すると，クラス属性はhighlightとして設定されています． そこで，ファイル内のクラス属性をhighlighter-rougeに置換することで，シンタックスハイライトが適用されました． 試行錯誤の末，シンタックスハイライトの適用までこぎつけましたが，この辺り十分に理解できていないかもしれません．</description>
    </item>
    
    <item>
      <title>Jekyllデフォルトテンプレートの自動リンク</title>
      <link>https://mukai-lab.info/pages/tech/jekyll/2016-02-04-top_link/</link>
      <pubDate>Thu, 04 Feb 2016 09:26:26 +0000</pubDate>
      
      <guid>https://mukai-lab.info/pages/tech/jekyll/2016-02-04-top_link/</guid>
      <description>Jekyllのデフォルトテンプレートでは， トップページのヘッダ部の右にサイトに含まれるページのリンクを自動的に追加してくれます． これはとても便利な機能ではあるのですが，ページ数が増えてくると，特定のページは除いて欲しいというケースが発生します．
そこで，YAML Front Matterを利用して解決します． まずは，&amp;quot;_templates/page&amp;quot;に，top_linkという名前の変数を下記のように用意します． これで，新規に作成するページには，top_linkの行が自動的に追加されます．
 トップページに自動的にリンクを追加する場合は，ページを作成した後で，このtop_linkの値を&amp;quot;true&amp;quot;に設定しておきましょう． 次に，&amp;quot;_includes/header.html&amp;quot;に下記のようにtop_linkに関する条件文を追加します．
 これで，トップページの自動リンクをtop_linkという変数で制御できるようになります．</description>
    </item>
    
  </channel>
</rss>